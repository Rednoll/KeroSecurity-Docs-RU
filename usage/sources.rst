#################################
Декларирование схем доступа (WIP)
#################################

Kero-Security предоставляет вам 3 основных варианта декларирования схем:

* :ref:`С помощью кода<ByCode>`
* :ref:`С помощью аннотаций<ByAnnotations>`
* :ref:`С помощью KSDL<ByKSDL>`

.. _ByCode:

--------------
С помощью кода
--------------

Декларирование схем доступа посредством кода возможно через "ручной" конфигуратор, который можно получить из Агента.

.. code-block:: java
	:linenos:
	
	agent.getConfigurator()
	    .scheme(SomeScheme.class)
	        .defaultDeny()
	        .property("obj")
	            .defaulDeny()
	            .grantFor("OWNER");

1. Получаем конфигуратор из агента.
2. Селектим схему по классу (автоматически создается при отсутствии).
3. Устанавливаем правило по дефолту запрещать доступ.
4. Селектим свойство "obj".
5. Также устанавливаем дефолтное правило, но уже для свойства.
6. Разрешаем доступ к свойству роле OWNER.

.. warning::
	Так как при селекте в случае отсутствия схемы она создается, а Агент при создании схемы её автоматически конфигурирует из других источников (аннотации, KSDL ...). Конфигурация заданая с помощью кода, всегда будет иметь более высокий приоритет (просходит перекрывание правил: последнее добавленное является более авторитетным).

.. note::
	Данный способ рекомендуется использовать только в тестах, в иных случаях лучше использовать декларацию посредством аннотаций или KSDL.

.. _ByAnnotations:

-------------------
С помощью аннотаций
-------------------

Список аннотаций:

* **@GrantFor** - Разрешить доступ для определенных ролей.
* **@DenyFor** - Запретить доступ для определенных ролей.
* **@DefaultGrant** - По дефолту разрешать доступ.
* **@DefaultDeny** - По дефолту запрещать доступ.
* **@PropagateRole** - указать распространение роли (см. Распростронение Доступа).
* **@EnableInherit** - включить наследование схем.
* **@DisableInherit** - отключить наследование схем.
* **@AddDenyInterceptor** - добавить интерцептор для определенных ролей.
* **@DenyWithInterceptor** - запретить доступ к определенным ролям и добавить интерцептор.

.. warning::
	У вашего Агента должен быть AnnotationAccessSchemeConfigurator, иначе данный метод работать не будет.

.. note::
	Данный способ подходит больше всего небольшим проектам с fullstack разработчиками отвечающими за front-end, так-как им будет известно "что, где и как" можно потрогать. Для больших же проектов, советую использовать KSDL.

.. _ByKSDL:

----------------------------------
С помощью :doc:`KSDL</usage/ksdl>`
----------------------------------

Декларирование схем с помощью :doc:`KSDL</usage/ksdl>` (см. :doc:`KSDL</usage/ksdl>`) в большинстве случаев полезно для больших проектов, либо для проектов, которым необходимо динамически* менять схемы доступа. Kero-Security предлагает множество вариантов получения KSDL схем, некоторые из них:

* Загрузка из ClassPath-а (файлы расширения .ks и .k-s)
* Загрузка из файловой системы (как отдельные файлы, так и целые директории)
* Загрузка из Git репозитория.
* Загрузка с сервера посредством FTP (файлы).
* Загрузка с сервера посредством HTTP (файлы).
* Через REST API.

.. note::
	Полезность для больших проектов в том, что разработчики с front-end стороны. Могут, к примеру, зайти на Git репозиторий со схемами доступа и узнать "что они могут, а что нет" не залезая в код back-end стороны.