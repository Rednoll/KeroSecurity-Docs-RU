###############
Глоссарий (WIP)
###############

.. _KeroAccessAgent:

===============
KeroAccessAgent
===============
Агент представляет из себя фасад KeroSecurity, дающий доступ ко всем основным функциям фреймворка.

.. note::
	Агентов у приложения может быть несколько, при этом у каждого агента свои :ref:`схемы<AccessScheme>`, :ref:`роли<Role>` и т.д. В большинстве случаев приложению хватает одного Агента.

Получить Агента можно используя KeroAccessAgentFactory. Настройка Агента производится с помощью конфигураторов (KeroAccessAgentConfigurator) их необходимо передать фабрике перед созданием Агента.

.. _AccessScheme:

============
AccessScheme
============
Схема описывает как защищать конкретный класс объектов. С

.. note::
	Схемы можно описывать как для классов, так и для интерфейсов.

.. _Property:

========
Property
========
Набор правил доступа, интерцепторов и т.д. для конкретного свойства объекта. 

.. _AccessRule:

==========
AccessRule
==========
Правило доступа к свойству объекта. Представляет из себя набор :ref:`ролей<Role>`, которым оно либо разрешает доступ, либо запрещает.

.. _DenyInterceptor:

===============
DenyInterceptor
===============
Интерцептор запрета доступа является функцией, которая вызывается вместо запрещенной.

===========================
PreparedAccessConfiguration
===========================
Подготовленная конфигурация доступа - производное от :ref:`схемы доступа <AccessScheme>`, если схема доступа хранит все :ref:`правила<AccessRule>`, :ref:`интерцепторы<DenyInterceptor>` и т.д. То конфигурация хранит конкретные значения для определенного набора ролей (доступ к свойству А разрешен или нет. Если нет, то какой :ref:`интерцептор<DenyInterceptor>` использовать).

.. note::
	При стандартном изспользовании Kero-Security подготовленные конфигруации остаются "под капотом" системы, поэтому некоторые детали могут быть опущены.

.. _Role:

====
Role
====
Роль по сути является чисто меткой с названием и не имеет какого-либо поведения.